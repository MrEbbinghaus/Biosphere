["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$brute.system","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$add-system-fn",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/system.cljc","~:line",7,"~:column",7,"~:end-line",7,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^E",[["~$system","~$system-fn"]]]]],"~:doc","Add a function that represents a system, e.g. Physics, Rendering, etc.\n  This needs to be in the structure: (fn [system delta]) where 'delta' is the number of milliseconds\n  since the last game tick. This will also need to return the system in the state you want passed to the\n  next system-fn, and ultimately out of process-one-game-tick.\n  This will then be called directly when `process-one-game-tick` is called"],"^5","~$brute.system/add-system-fn","^?","target/public/cljs-out/biosphere/brute/system.cljc","^C",20,"~:method-params",["^E",[["^G","^H"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"~:variadic?",false,"^@",7,"~:ret-tag",["^4",["~$clj","~$any"]],"^B",7,"~:max-fixed-arity",2,"~:fn-var",true,"^D",["^E",["^F",["^E",[["^G","^H"]]]]],"^I","Add a function that represents a system, e.g. Physics, Rendering, etc.\n  This needs to be in the structure: (fn [system delta]) where 'delta' is the number of milliseconds\n  since the last game tick. This will also need to return the system in the state you want passed to the\n  next system-fn, and ultimately out of process-one-game-tick.\n  This will then be called directly when `process-one-game-tick` is called"],"~$throttled-fn",["^ ","^=",null,"^>",["^ ","^?","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/system.cljc","^@",16,"^A",8,"^B",16,"^C",20,"~:private",true,"^D",["^E",["^F",["^E",[["^H","~$atom","~$threshhold","^G","~$delta"]]]]],"^I","The function that does the actual throttling."],"^U",true,"^5","~$brute.system/throttled-fn","^?","target/public/cljs-out/biosphere/brute/system.cljc","^C",20,"^K",["^E",[["^H","^V","^W","^G","^X"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^N",false,"^@",16,"^O",["^4",[null,"^Q"]],"^B",16,"^R",5,"^S",true,"^D",["^E",["^F",["^E",[["^H","^V","^W","^G","^X"]]]]],"^I","The function that does the actual throttling."],"~$add-throttled-system-fn",["^ ","^=",null,"^>",["^ ","^?","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/system.cljc","^@",27,"^A",7,"^B",27,"^C",30,"^D",["^E",["^F",["^E",[["^G","^H","~$threshold"]]]]],"^I","Same as `add-system-fn`, but will only execute the `system-fn` after `threshold` milliseconds has been equalled or passed."],"^5","~$brute.system/add-throttled-system-fn","^?","target/public/cljs-out/biosphere/brute/system.cljc","^C",30,"^K",["^E",[["^G","^H","^["]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^N",false,"^@",27,"^O",["^4",["^P","^Q"]],"^B",27,"^R",3,"^S",true,"^D",["^E",["^F",["^E",[["^G","^H","^["]]]]],"^I","Same as `add-system-fn`, but will only execute the `system-fn` after `threshold` milliseconds has been equalled or passed."],"~$process-one-game-tick",["^ ","^=",null,"^>",["^ ","^?","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/system.cljc","^@",32,"^A",7,"^B",32,"^C",28,"^D",["^E",["^F",["^E",[["^G","^X"]]]]],"^I","Optional convenience function that calls each of the system functions that have been added in turn, with the provided delta."],"^5","~$brute.system/process-one-game-tick","^?","target/public/cljs-out/biosphere/brute/system.cljc","^C",28,"^K",["^E",[["^G","^X"]]],"^L",null,"^M",["^E",[null,null]],"^A",1,"^N",false,"^@",32,"^O",["^4",[null,"^Q"]],"^B",32,"^R",2,"^S",true,"^D",["^E",["^F",["^E",[["^G","^X"]]]]],"^I","Optional convenience function that calls each of the system functions that have been added in turn, with the provided delta."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:system-fns"]],"~:order",["^17"]],"^I","Utility functions for system management.\n  Systems in brute are simply functions that manage aspects like Physics, Rendering, Camera etc"]