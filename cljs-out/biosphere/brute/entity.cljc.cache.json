["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$RegExp",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$brute.entity","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$create-uuid",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","~:line",12,"~:column",7,"~:end-line",12,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^G",[[]]]]],"~:doc","create a UUID"],"^7","~$brute.entity/create-uuid","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",18,"~:method-params",["^G",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^G",[null,null]],"^C",1,"~:variadic?",false,"^B",12,"~:ret-tag","~$any","^D",12,"~:max-fixed-arity",0,"~:fn-var",true,"^F",["^G",["^H",["^G",[[]]]]],"^I","create a UUID"],"~$create-entity",["^ ","^?",null,"^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",22,"^C",7,"^D",22,"^E",20,"^F",["^G",["^H",["^G",[[]]]]],"^I","Create the entity and return it. Entities are just UUIDs"],"^7","~$brute.entity/create-entity","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",20,"^K",["^G",[[]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",22,"^O","^P","^D",22,"^Q",0,"^R",true,"^F",["^G",["^H",["^G",[[]]]]],"^I","Create the entity and return it. Entities are just UUIDs"],"~$get-component-type",["^ ","^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",42,"^C",11,"^D",42,"^E",29,"^I","Returns the type for a given component. Using a multimethod with 'class' as the dispatch-fn to allow for extensibility per application.\n          By default returns the class of the component."],"^7","~$brute.entity/get-component-type","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",29,"^C",1,"^B",42,"^D",42,"~:tag","~$cljs.core/MultiFn","^I","Returns the type for a given component. Using a multimethod with 'class' as the dispatch-fn to allow for extensibility per application.\n          By default returns the class of the component."],"~$get-all-components-on-entity",["^ ","^?",null,"^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",109,"^C",7,"^D",109,"^E",35,"^F",["^G",["^H",["^G",[["~$system","~$entity"]]]]],"^I","Get all the components on a specific entity. Useful for debugging"],"^7","~$brute.entity/get-all-components-on-entity","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",35,"^K",["^G",[["^Z","^["]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",109,"^O","~$cljs.core/LazySeq","^D",109,"^Q",2,"^R",true,"^F",["^G",["^H",["^G",[["^Z","^["]]]]],"^I","Get all the components on a specific entity. Useful for debugging"],"~$add-entity",["^ ","^?",null,"^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",34,"^C",7,"^D",34,"^E",17,"^F",["^G",["^H",["^G",[["^Z","^["]]]]],"^I","Add the entity to the ES Data Structure and returns it"],"^7","~$brute.entity/add-entity","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",17,"^K",["^G",[["^Z","^["]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",34,"^O","~$clj","^D",34,"^Q",2,"^R",true,"^F",["^G",["^H",["^G",[["^Z","^["]]]]],"^I","Add the entity to the ES Data Structure and returns it"],"~$get-component",["^ ","^?",null,"^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",66,"^C",7,"^D",66,"^E",20,"^F",["^G",["^H",["^G",[["^Z","^[","~$type"]]]]],"^I","Get the component data for a specific component type"],"^7","~$brute.entity/get-component","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",20,"^K",["^G",[["^Z","^[","^16"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",66,"^O",["^6",[null,"^P"]],"^D",66,"^Q",3,"^R",true,"^F",["^G",["^H",["^G",[["^Z","^[","^16"]]]]],"^I","Get the component data for a specific component type"],"~$get-all-entities-with-component",["^ ","^?",null,"^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",79,"^C",7,"^D",79,"^E",38,"^F",["^G",["^H",["^G",[["^Z","^16"]]]]],"^I","Get all the entities that have a given component type"],"^7","~$brute.entity/get-all-entities-with-component","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",38,"^K",["^G",[["^Z","^16"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",79,"^O","^14","^D",79,"^Q",2,"^R",true,"^F",["^G",["^H",["^G",[["^Z","^16"]]]]],"^I","Get all the entities that have a given component type"],"~$add-component",["^ ","^?",null,"^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",53,"^C",7,"^D",53,"^E",20,"^F",["^G",["^H",["^G",[["^Z","^[","~$instance"]]]]],"^I","Add a component instance to a given entity in the ES data structure and returns it.\n  Will overwrite a component if already set."],"^7","~$brute.entity/add-component","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",20,"^K",["^G",[["^Z","^[","^1;"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",53,"^O","^14","^D",53,"^Q",3,"^R",true,"^F",["^G",["^H",["^G",[["^Z","^[","^1;"]]]]],"^I","Add a component instance to a given entity in the ES data structure and returns it.\n  Will overwrite a component if already set."],"~$create-system",["^ ","^?",null,"^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",4,"^C",7,"^D",4,"^E",20,"^F",["^G",["^H",["^G",[[]]]]],"^I","Creates the system data structure that will need to be passed to all entity functions"],"^7","~$brute.entity/create-system","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",20,"^K",["^G",[[]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",4,"^O","~$cljs.core/IMap","^D",4,"^Q",0,"^R",true,"^F",["^G",["^H",["^G",[[]]]]],"^I","Creates the system data structure that will need to be passed to all entity functions"],"~$kill-entity",["^ ","^?",null,"^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",98,"^C",7,"^D",98,"^E",18,"^F",["^G",["^H",["^G",[["^Z","^["]]]]],"^I","Destroy an entity completely from the ES data structure and returns it"],"^7","~$brute.entity/kill-entity","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",18,"^K",["^G",[["^Z","^["]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",98,"^O","^14","^D",98,"^Q",2,"^R",true,"^F",["^G",["^H",["^G",[["^Z","^["]]]]],"^I","Destroy an entity completely from the ES data structure and returns it"],"~$update-component",["^ ","^?",null,"^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",71,"^C",7,"^D",71,"^E",23,"^F",["^G",["^H",["^G",[["^Z","^[","^16","~$fn","~$&","~$args"]]]]],"^I","Update an entity's component instance through through fn. Function is applied first with the specified component and any other args applied,\n  and should return the modified component instance. Return nil if you want no change to occur.","~:top-fn",["^ ","^N",true,"~:fixed-arity",4,"^Q",4,"^K",[["^G",["^Z","^[","^16","^1C","^1D"]]],"^F",["^G",[["^Z","^[","^16","^1C","~$&","^1D"]]],"^M",["^G",[null]]]],"^7","~$brute.entity/update-component","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",23,"^1E",["^ ","^N",true,"^1F",4,"^Q",4,"^K",[["^G",["^Z","^[","^16","^1C","^1D"]]],"^F",["^G",[["^Z","^[","^16","^1C","~$&","^1D"]]],"^M",["^G",[null]]],"^K",[["^G",["^Z","^[","^16","^1C","^1D"]]],"^L",null,"^1F",4,"^M",["^G",[null]],"^C",1,"^N",true,"~:methods",[["^ ","^1F",4,"^N",true,"^W",["^6",[null,"^14"]]]],"^B",71,"^O","^P","^D",71,"^Q",4,"^R",true,"^F",["^G",[["^Z","^[","^16","^1C","~$&","^1D"]]],"^I","Update an entity's component instance through through fn. Function is applied first with the specified component and any other args applied,\n  and should return the modified component instance. Return nil if you want no change to occur."],"~$remove-component",["^ ","^?",null,"^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",86,"^C",7,"^D",86,"^E",23,"^F",["^G",["^H",["^G",[["^Z","^[","^1;"]]]]],"^I","Remove a component instance from the ES data structure and returns it"],"^7","~$brute.entity/remove-component","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",23,"^K",["^G",[["^Z","^[","^1;"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",86,"^O","^14","^D",86,"^Q",3,"^R",true,"^F",["^G",["^H",["^G",[["^Z","^[","^1;"]]]]],"^I","Remove a component instance from the ES data structure and returns it"],"~$get-all-entities",["^ ","^?",null,"^@",["^ ","^A","/Users/bjebb/Development/biosphere/target/public/cljs-out/biosphere/brute/entity.cljc","^B",27,"^C",7,"^D",27,"^E",23,"^F",["^G",["^H",["^G",[["^Z"]]]]],"^I","Returns a list of all the entities. Not that useful in application, but good for debugging/testing"],"^7","~$brute.entity/get-all-entities","^A","target/public/cljs-out/biosphere/brute/entity.cljc","^E",23,"^K",["^G",[["^Z"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",27,"^O","^14","^D",27,"^Q",1,"^R",true,"^F",["^G",["^H",["^G",[["^Z"]]]]],"^I","Returns a list of all the entities. Not that useful in application, but good for debugging/testing"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:default","~:entity-component-types","~:entity-components","~:hierarchy"]],"~:order",["^1S","^1R","^1T","^1Q"]],"^I","Entity Manager functions for the Brute Entity Component System"]